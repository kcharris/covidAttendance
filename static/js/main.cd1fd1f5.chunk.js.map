{"version":3,"sources":["OptionBar.js","Student.js","Overview.js","App.js","serviceWorker.js","index.js"],"names":["OptionBar","onClick","this","props","onAClick","style","backgroundColor","onGClick","React","Component","Student","state","absent","changeAttendance","bind","setState","button","gBool","handleStudentGroupClick","student","id","color","name","Overview","groupBool","groupColor","students","newDict","i","push","handleAttendanceClick","handleGroupClick","handleColorChange","resetColor","studentId","map","newStudent","e","target","value","nList","select","length","key","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd1fd1f5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass OptionBar extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.props.onAClick} style={{ backgroundColor: \"lightgreen\" }}>Attendance</button>\r\n                <button onClick={this.props.onGClick} style={{ backgroundColor: \"lightblue\" }}>Groups</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default OptionBar\r\n","import React from \"react\";\r\n\r\nclass Student extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            absent: false,\r\n        }\r\n        this.changeAttendance = this.changeAttendance.bind(this)\r\n    }\r\n    changeAttendance(){\r\n        this.setState({\r\n            absent: !this.state.absent\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        let button = <div></div>\r\n        if(!this.props.gBool){\r\n            button = <button onClick={this.changeAttendance} style={this.state.absent ? {backgroundColor: \"red\"}: {backgroundColor: \"lightgreen\"}}>{this.props.student.name}</button>\r\n        }\r\n        else{\r\n            button = <button onClick={() => this.props.handleStudentGroupClick(this.props.student.id)} style={{backgroundColor: this.props.student.color}}>{this.props.student.name}</button>\r\n        }\r\n        return(<div>\r\n                {button}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Student","import React from \"react\";\r\nimport OptionBar from \"./OptionBar\"\r\nimport Student from \"./Student\"\r\n\r\n\r\nclass Overview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            groupBool: false,\r\n            groupColor: 'lightblue',\r\n            students: (() => {\r\n                let newDict = []\r\n                for (let i = 0; i < 20; i++) {\r\n                    newDict.push(\r\n                        {\r\n                            name: `student${i + 1}`,\r\n                            color: 'white',\r\n                            id: i\r\n                        }\r\n                    )\r\n                }\r\n                return newDict\r\n            })(),\r\n        }\r\n\r\n        this.handleAttendanceClick = this.handleAttendanceClick.bind(this);\r\n        this.handleGroupClick = this.handleGroupClick.bind(this);\r\n        this.handleStudentGroupClick = this.handleStudentGroupClick.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this)\r\n        this.resetColor = this.resetColor.bind(this)\r\n    }\r\n    handleAttendanceClick() {\r\n        this.setState({\r\n            groupBool: false\r\n        })\r\n    }\r\n    handleGroupClick() {\r\n        this.setState({\r\n            groupBool: true\r\n        })\r\n    }\r\n    handleStudentGroupClick(studentId) {\r\n        this.setState((state) => {\r\n            return ({\r\n                students: (() => {\r\n                    let newStudents = state.students.map((student) => {\r\n                        if (student.id === studentId) {\r\n                            let newStudent = student\r\n                            newStudent.color = this.state.groupColor\r\n                            return newStudent\r\n                        }\r\n                        else {\r\n                            return student\r\n                        }\r\n                    })\r\n\r\n                    return newStudents\r\n                })(),\r\n            })\r\n        })\r\n    }\r\n    handleColorChange(e) {\r\n        this.setState({\r\n            groupColor: e.target.value\r\n        })\r\n    }\r\n    resetColor() {\r\n        this.setState((state) => {\r\n            return ({\r\n                students: state.students.map((student) => {\r\n                    let newStudent = student\r\n                    newStudent.color = \"white\"\r\n                    return newStudent\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let nList = []\r\n        let select = \"\"\r\n        if (this.state.students.length !== 0) {\r\n            for (let i = 0; i < this.state.students.length; i++) {\r\n                nList.push(<Student student={this.state.students[i]} gBool={this.state.groupBool} key={this.state.students[i].id} handleStudentGroupClick={this.handleStudentGroupClick} />)\r\n            }\r\n        }\r\n        if (this.state.groupBool) {\r\n            select = <select value={this.state.groupColor} onChange={this.handleColorChange}>\r\n                <option value=\"yellow\">Yellow</option>\r\n                <option value=\"sienna\">Sienna</option>\r\n                <option value=\"lightblue\">Light Blue</option>\r\n                <option value=\"purple\">purple</option>\r\n                <option value=\"orange\">Orange</option>\r\n                <option value=\"tan\">Tan</option>\r\n            </select>\r\n        }\r\n        else {\r\n            select = <div></div>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <OptionBar onAClick={this.handleAttendanceClick} onGClick={this.handleGroupClick} />\r\n                <button onClick={this.resetColor}>Reset Group Color</button>\r\n                {select}\r\n                <div id=\"list\">\r\n                    {nList}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Overview\r\n","import React from 'react';\r\nimport Overview from './Overview'\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Overview/>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}